
@page "/office/{OfficeId:int}"
@page "/office/{OfficeId:int}/{IsAnnoucementMode:bool}"
@page "/office/{OfficeId:int}/{IsAnnoucementMode:bool}/{AnnoucementScreenId:int}"

@using ClinicQueue.Data
@using ClinicQueue.Auth
@using System.Linq


<span>Now serving: @CurrentPatient</span>
<br />
<span>Next serving: @NextPatient</span>
<br />

<AuthorizeView Policy="@Policies.CanUpdateQueue">
    <span>Last number: @LastPatient</span>
    <br />
    <button class="btn btn-primary" @onclick="(_ => CurrentRoomQueue.AddNewPatient())">Add patient</button>
</AuthorizeView>

<AuthorizeView Policy="@Policies.CanMoveQueue">
    <button class="btn btn-primary" @onclick="CurrentRoomQueue.MoveNext" disabled="@_nextDisabled">Next patient</button>
</AuthorizeView>

<br />
Total patient count = @CurrentRoomQueue.Line.Count()
<br />
<AuthorizeView>
    <NotAuthorized>
        <button class="btn btn-primary" @onclick="@(_ => IsAnnoucementMode = true)" hidden="@IsAnnoucementMode">Full screen</button>
    </NotAuthorized>
</AuthorizeView>

Office @OfficeId

@code {
    public enum ScreenLocation
    {
        Both = 0,
        Right,
        Left
    };



    [Inject] public AppState State { get; set; }
    [Inject] public ClinicWaitingLists WaitingLists { get; set; }
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    [Parameter] public int OfficeId { get; set; }

    [Parameter]
    public bool IsAnnoucementMode
    {
        get => State.IsAnnoucementMode;
        set
        {
            if (!AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
                State.IsAnnoucementMode = value;
            else
            {
                State.IsAnnoucementMode = false;
            }
        }
    }

    private ScreenLocation _annoucementScreenId; //0
    [Parameter]
    public int AnnoucementScreenId
    {
        set
        {
            if (value != (int)_annoucementScreenId)
            {
                _annoucementScreenId = (ScreenLocation)value;
                if (_annoucementScreenId != ScreenLocation.Both && !IsAnnoucementMode)
                {
                    IsAnnoucementMode = true;
                }
            }
        }
    }

    private RoomQueue CurrentRoomQueue { get; set; }

    private string _currentPatient;
    private string CurrentPatient
    {
        get
        {
            if (_annoucementScreenId == ScreenLocation.Both)
                return _currentPatient;
            else
            {
                if (_annoucementScreenId == ScreenLocation.Right)
                {
                    return _currentPatient.Substring(0, 2);
                }
                else
                {
                    return _currentPatient.Substring(2, (_currentPatient.Length==3?1:2));
                }
            }
        }
        set { _currentPatient = value; }
    }
    private string NextPatient { get; set; }
    private string LastPatient { get; set; }

    private bool _nextDisabled = true;

    protected override void OnInitialized()
    {
        AttachRoomList();
    }

    protected override void OnAfterRender()
    {
        if (OfficeId != CurrentRoomQueue.OfficeId)
        {
            AttachRoomList();
            StateHasChanged();
        }
    }

    private void AttachRoomList()
    {
        CurrentRoomQueue = WaitingLists.Queues.Where(q => q.OfficeId == OfficeId).SingleOrDefault();
        CurrentRoomQueue.OnLineChange += RefreshData;
        CurrentPatient = CurrentRoomQueue.CurrentPatient;
        NextPatient = CurrentRoomQueue.NextPatient;
        LastPatient = CurrentRoomQueue.LastPatient;
    }


    void RefreshData(object sender, EventArgs e)
    {
        CurrentPatient = CurrentRoomQueue.CurrentPatient;
        NextPatient = CurrentRoomQueue.NextPatient;
        LastPatient = CurrentRoomQueue.LastPatient;
        _nextDisabled = NextPatient.Equals("No next patient added");

        InvokeAsync(() => StateHasChanged());

    }
}
